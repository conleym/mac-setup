---
- set_fact:
    install_from_dmg_path_to_stat: "{{ install_from_dmg_app_destination }}/{{ install_from_dmg_app_name }}.app"
  when: install_from_dmg_path_to_stat is not defined or install_from_dmg_path_to_stat == ''

- name: Check for existing install
  stat:
    path: "{{ install_from_dmg_path_to_stat }}"
  register: install_from_dmg_st

- set_fact:
    install_from_dmg_st: "{{ install_from_dmg_st.stat }}"

- when: not (install_from_dmg_st.exists)
  block:
    - name: Download disk image
      get_url:
        url: "{{ install_from_dmg_image_url }}"
        dest: "{{ install_from_dmg_image_destination }}"
        force: "{{ install_from_dmg_force_download }}"
        mode: u=rw
      when: install_from_dmg_image_checksum is not defined

    - name: Download disk image and verify checksum
      get_url:
        url: "{{ install_from_dmg_image_url }}"
        dest: "{{ install_from_dmg_image_destination }}"
        checksum: "{{ install_from_dmg_image_checksum }}"
        force: "{{ install_from_dmg_force_download }}"
        mode: u=rw
      when: install_from_dmg_image_checksum is defined

    - include_role:
        name: mount_dmg
      vars:
        path: "{{ install_from_dmg_image_destination }}"
        mountpoint: "{{ install_from_dmg_app_name }}"

    - name: Copy app to destination
      command: "cp -a '/Volumes/{{ install_from_dmg_app_name }}/{{ install_from_dmg_app_name }}.app' /Applications"
      when: install_method == 'cp'

    - name: Install package
      command: "installer -pkg '/Volumes/{{ install_from_dmg_app_name }}/{{ install_from_dmg_install_method }}' -target /"
      when: install_method is regex('^.*\.pkg$')
      become: true

    - name: Run installer app
      command: "open -a '/Volumes/{{ install_from_dmg_app_name }}/{{ install_from_dmg_install_method }}'"
      when: install_method is regex('^.*\.app$')

  always:
    - include_role:
        name: unmount_dmg
      vars:
        mountpoint: "{{ install_from_dmg_app_name }}"
