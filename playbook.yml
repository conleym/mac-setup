---
- hosts: localhost
  become: no
  connection: local
  vars_files:
      - vars.yml
      - pip.yml
      - ports.yml
      - mas.yml
      - dmgs.yml
  tasks:
      # See https://unix.stackexchange.com/questions/234104/get-osx-codename-from-command-line
      - name: Determine OS version
        command: sw_vers -productVersion
        register: sw_vers_stdout

      - set_fact:
          macos_version: "{{ sw_vers_stdout.stdout }}"
          macos_major_version: "{{ sw_vers_stdout.stdout | regex_replace('^(10\\.\\d+).*', '\\1') }}"

      - name: Determine marketing version
        shell: >-
            awk '/SOFTWARE LICENSE AGREEMENT FOR (macOS|OS X)/' '/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf' |
            awk -F '(macOS|OS X)' '{ print $NF }' |
            awk '{ gsub(/^[^a-zA-Z]*|[^a-zA-Z]*$/, ""); print }'
        register: awk_stdout

      - set_fact:
          macos_marketing_version: "{{ awk_stdout.stdout }}"

      - set_fact:
          downloads: "{{ '~/Downloads/setup' | expanduser }}"

      - name: Ensure downloads directory exists
        file:
          path: "{{ downloads }}"
          state: directory

      - name: Ensure ~/.ssh exists
        file:
          path: "{{ '~/.ssh' | expanduser }}"
          state: directory
          mode: u=rwx

      - include_role:
          name: xquartz

      - include_role:
          name: mactex
          apply:
            tags:
              - tex
        tags:
          - tex

      - include_role:
          name: macports
          apply:
            tags:
              - ports
        tags:
          - ports

      - name: Download and install apps from disk images
        include_role:
          name: install_app_from_dmg
          apply:
            tags:
              - apps
        vars:
          dmg_url: "{{ item.dmg_url }}"
          dmg_destination: "{{ downloads }}/{{ item.app_name }}.dmg"
          app_name: "{{ item.app_name }}"
        with_items: "{{ dmgs_to_download_and_install }}"
        tags:
          - apps

      - name: List installed apps
        command: mas list
        register: mas_list_stdout
        tags:
          - apps

      - name: Install AppStore apps
        command: mas install "{{ item }}"
        with_items: "{{ mas_apps_to_install }}"
        when: (item | string) not in mas_list_stdout.stdout
        tags:
          - apps

      - name: Install global Python packages
        pip:
          executable: pip3
          name: "{{ pip_global_packages_to_install }}"
          state: present
        become: yes

      - name: Install user Python packages
        pip:
          executable: pip3
          name: "{{ pip_user_packages_to_install }}"
          state: present
          extra_args: --user --upgrade

      - name: Add MacPorts to path
        lineinfile:
          line: /opt/local/bin
          path: /etc/paths
          state: present
          insertbefore: /usr/local/bin
        become: yes
        tags:
          - ports

      - name: Add MacPorts to path
        lineinfile:
          line: /opt/local/sbin
          path: /etc/paths
          state: present
          insertbefore: /usr/local/bin
        become: yes
        tags:
          - ports

      - name: Clone nvm
        git:
          repo: https://github.com/nvm-sh/nvm
          dest: "{{ '~/.nvm' | expanduser }}"

      - name: Install node.js
        shell: "source ~/.nvm/nvm.sh && nvm install {{ 'v' + node_version }}"
        args:
          creates: "{{ '~/.nvm/versions/node/v' + node_version | expanduser }}"

      # Install separately, since some ports require it, or at least look for it, causing prompts.
      - name: Install OpenJDK
        macports:
          selfupdate: yes
          upgrade: yes
          name: openjdk8
          state: present
        become: yes
        tags:
          - ports

      - name: Install ports
        macports:
          selfupdate: yes
          upgrade: yes
          name: "{{ item.key }}"
          variant: "{{ item.value }}"
          state: present
        become: yes
        with_dict: "{{ ports_to_install }}"
        tags:
          - ports

      - name: Clone .emacs.d
        git:
          repo: git@github.com:conleym/dot-emacs.git
          dest: "{{  '~/.emacs.d' | expanduser }}"
        tags:
          - emacs

      - set_fact:
          emacs_src_dir: "{{ '~/src/emacs' | expanduser }}"
        tags:
          - emacs

      - name: Clone emacs
        git:
          repo: https://github.com/emacs-mirror/emacs
          dest: "{{ emacs_src_dir }}"
        tags:
          - emacs

      - name: Build emacs
        command: gmake install
        args:
          chdir: "{{  emacs_src_dir }}"
        tags:
          - emacs

      - file:
          path: "{{ emacs_src_dir }}/nextstep/Emacs.app/Contents/Frameworks"
          state: directory
        tags:
          - emacs

      - name: Make emacs standalone
        command: /usr/bin/python -m macholib standalone nextstep/Emacs.app
        args:
          chdir: "{{  emacs_src_dir }}"
        tags:
          - emacs

      # TODO copy to /Applications?

